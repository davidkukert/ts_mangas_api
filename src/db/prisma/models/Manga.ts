
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Manga` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Manga
 * 
 */
export type MangaModel = runtime.Types.Result.DefaultSelection<Prisma.$MangaPayload>

export type AggregateManga = {
  _count: MangaCountAggregateOutputType | null
  _avg: MangaAvgAggregateOutputType | null
  _sum: MangaSumAggregateOutputType | null
  _min: MangaMinAggregateOutputType | null
  _max: MangaMaxAggregateOutputType | null
}

export type MangaAvgAggregateOutputType = {
  year: number | null
}

export type MangaSumAggregateOutputType = {
  year: number | null
}

export type MangaMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  originalLanguage: string | null
  publicationDemographic: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum | null
  year: number | null
  contentRating: $Enums.ContentRatingEnum | null
  state: $Enums.StateEnum | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MangaMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  originalLanguage: string | null
  publicationDemographic: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum | null
  year: number | null
  contentRating: $Enums.ContentRatingEnum | null
  state: $Enums.StateEnum | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MangaCountAggregateOutputType = {
  id: number
  title: number
  alternativeTitles: number
  description: number
  originalLanguage: number
  publicationDemographic: number
  status: number
  year: number
  contentRating: number
  state: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MangaAvgAggregateInputType = {
  year?: true
}

export type MangaSumAggregateInputType = {
  year?: true
}

export type MangaMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  originalLanguage?: true
  publicationDemographic?: true
  status?: true
  year?: true
  contentRating?: true
  state?: true
  createdAt?: true
  updatedAt?: true
}

export type MangaMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  originalLanguage?: true
  publicationDemographic?: true
  status?: true
  year?: true
  contentRating?: true
  state?: true
  createdAt?: true
  updatedAt?: true
}

export type MangaCountAggregateInputType = {
  id?: true
  title?: true
  alternativeTitles?: true
  description?: true
  originalLanguage?: true
  publicationDemographic?: true
  status?: true
  year?: true
  contentRating?: true
  state?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MangaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Manga to aggregate.
   */
  where?: Prisma.MangaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Manga to fetch.
   */
  orderBy?: Prisma.MangaOrderByWithRelationInput | Prisma.MangaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MangaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Manga from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Manga.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Manga
  **/
  _count?: true | MangaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MangaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MangaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MangaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MangaMaxAggregateInputType
}

export type GetMangaAggregateType<T extends MangaAggregateArgs> = {
      [P in keyof T & keyof AggregateManga]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManga[P]>
    : Prisma.GetScalarType<T[P], AggregateManga[P]>
}




export type MangaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MangaWhereInput
  orderBy?: Prisma.MangaOrderByWithAggregationInput | Prisma.MangaOrderByWithAggregationInput[]
  by: Prisma.MangaScalarFieldEnum[] | Prisma.MangaScalarFieldEnum
  having?: Prisma.MangaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MangaCountAggregateInputType | true
  _avg?: MangaAvgAggregateInputType
  _sum?: MangaSumAggregateInputType
  _min?: MangaMinAggregateInputType
  _max?: MangaMaxAggregateInputType
}

export type MangaGroupByOutputType = {
  id: string
  title: string
  alternativeTitles: string[]
  description: string | null
  originalLanguage: string
  publicationDemographic: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt: Date
  updatedAt: Date
  _count: MangaCountAggregateOutputType | null
  _avg: MangaAvgAggregateOutputType | null
  _sum: MangaSumAggregateOutputType | null
  _min: MangaMinAggregateOutputType | null
  _max: MangaMaxAggregateOutputType | null
}

type GetMangaGroupByPayload<T extends MangaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MangaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MangaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MangaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MangaGroupByOutputType[P]>
      }
    >
  > 



export type MangaWhereInput = {
  AND?: Prisma.MangaWhereInput | Prisma.MangaWhereInput[]
  OR?: Prisma.MangaWhereInput[]
  NOT?: Prisma.MangaWhereInput | Prisma.MangaWhereInput[]
  id?: Prisma.StringFilter<"Manga"> | string
  title?: Prisma.StringFilter<"Manga"> | string
  alternativeTitles?: Prisma.StringNullableListFilter<"Manga">
  description?: Prisma.StringNullableFilter<"Manga"> | string | null
  originalLanguage?: Prisma.StringFilter<"Manga"> | string
  publicationDemographic?: Prisma.EnumDemographicEnumNullableFilter<"Manga"> | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFilter<"Manga"> | $Enums.StatusEnum
  year?: Prisma.IntNullableFilter<"Manga"> | number | null
  contentRating?: Prisma.EnumContentRatingEnumFilter<"Manga"> | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFilter<"Manga"> | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
  authors?: Prisma.MangaAuthorListRelationFilter
  tags?: Prisma.TagListRelationFilter
  chapters?: Prisma.ChapterListRelationFilter
}

export type MangaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  alternativeTitles?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  originalLanguage?: Prisma.SortOrder
  publicationDemographic?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  authors?: Prisma.MangaAuthorOrderByRelationAggregateInput
  tags?: Prisma.TagOrderByRelationAggregateInput
  chapters?: Prisma.ChapterOrderByRelationAggregateInput
}

export type MangaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  title?: string
  AND?: Prisma.MangaWhereInput | Prisma.MangaWhereInput[]
  OR?: Prisma.MangaWhereInput[]
  NOT?: Prisma.MangaWhereInput | Prisma.MangaWhereInput[]
  alternativeTitles?: Prisma.StringNullableListFilter<"Manga">
  description?: Prisma.StringNullableFilter<"Manga"> | string | null
  originalLanguage?: Prisma.StringFilter<"Manga"> | string
  publicationDemographic?: Prisma.EnumDemographicEnumNullableFilter<"Manga"> | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFilter<"Manga"> | $Enums.StatusEnum
  year?: Prisma.IntNullableFilter<"Manga"> | number | null
  contentRating?: Prisma.EnumContentRatingEnumFilter<"Manga"> | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFilter<"Manga"> | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
  authors?: Prisma.MangaAuthorListRelationFilter
  tags?: Prisma.TagListRelationFilter
  chapters?: Prisma.ChapterListRelationFilter
}, "id" | "title">

export type MangaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  alternativeTitles?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  originalLanguage?: Prisma.SortOrder
  publicationDemographic?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MangaCountOrderByAggregateInput
  _avg?: Prisma.MangaAvgOrderByAggregateInput
  _max?: Prisma.MangaMaxOrderByAggregateInput
  _min?: Prisma.MangaMinOrderByAggregateInput
  _sum?: Prisma.MangaSumOrderByAggregateInput
}

export type MangaScalarWhereWithAggregatesInput = {
  AND?: Prisma.MangaScalarWhereWithAggregatesInput | Prisma.MangaScalarWhereWithAggregatesInput[]
  OR?: Prisma.MangaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MangaScalarWhereWithAggregatesInput | Prisma.MangaScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Manga"> | string
  title?: Prisma.StringWithAggregatesFilter<"Manga"> | string
  alternativeTitles?: Prisma.StringNullableListFilter<"Manga">
  description?: Prisma.StringNullableWithAggregatesFilter<"Manga"> | string | null
  originalLanguage?: Prisma.StringWithAggregatesFilter<"Manga"> | string
  publicationDemographic?: Prisma.EnumDemographicEnumNullableWithAggregatesFilter<"Manga"> | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumWithAggregatesFilter<"Manga"> | $Enums.StatusEnum
  year?: Prisma.IntNullableWithAggregatesFilter<"Manga"> | number | null
  contentRating?: Prisma.EnumContentRatingEnumWithAggregatesFilter<"Manga"> | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumWithAggregatesFilter<"Manga"> | $Enums.StateEnum
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Manga"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Manga"> | Date | string
}

export type MangaCreateInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorCreateNestedManyWithoutMangaInput
  tags?: Prisma.TagCreateNestedManyWithoutMangasInput
  chapters?: Prisma.ChapterCreateNestedManyWithoutMangaInput
}

export type MangaUncheckedCreateInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorUncheckedCreateNestedManyWithoutMangaInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutMangasInput
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutMangaInput
}

export type MangaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUpdateManyWithoutMangaNestedInput
  tags?: Prisma.TagUpdateManyWithoutMangasNestedInput
  chapters?: Prisma.ChapterUpdateManyWithoutMangaNestedInput
}

export type MangaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUncheckedUpdateManyWithoutMangaNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutMangasNestedInput
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutMangaNestedInput
}

export type MangaCreateManyInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MangaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MangaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MangaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  alternativeTitles?: Prisma.SortOrder
  description?: Prisma.SortOrder
  originalLanguage?: Prisma.SortOrder
  publicationDemographic?: Prisma.SortOrder
  status?: Prisma.SortOrder
  year?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MangaAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
}

export type MangaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  originalLanguage?: Prisma.SortOrder
  publicationDemographic?: Prisma.SortOrder
  status?: Prisma.SortOrder
  year?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MangaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  originalLanguage?: Prisma.SortOrder
  publicationDemographic?: Prisma.SortOrder
  status?: Prisma.SortOrder
  year?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MangaSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
}

export type MangaListRelationFilter = {
  every?: Prisma.MangaWhereInput
  some?: Prisma.MangaWhereInput
  none?: Prisma.MangaWhereInput
}

export type MangaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MangaScalarRelationFilter = {
  is?: Prisma.MangaWhereInput
  isNot?: Prisma.MangaWhereInput
}

export type MangaCreatealternativeTitlesInput = {
  set: string[]
}

export type MangaUpdatealternativeTitlesInput = {
  set?: string[]
  push?: string | string[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableEnumDemographicEnumFieldUpdateOperationsInput = {
  set?: $Enums.DemographicEnum | null
}

export type EnumStatusEnumFieldUpdateOperationsInput = {
  set?: $Enums.StatusEnum
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumContentRatingEnumFieldUpdateOperationsInput = {
  set?: $Enums.ContentRatingEnum
}

export type EnumStateEnumFieldUpdateOperationsInput = {
  set?: $Enums.StateEnum
}

export type MangaCreateNestedManyWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput> | Prisma.MangaCreateWithoutTagsInput[] | Prisma.MangaUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutTagsInput | Prisma.MangaCreateOrConnectWithoutTagsInput[]
  connect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
}

export type MangaUncheckedCreateNestedManyWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput> | Prisma.MangaCreateWithoutTagsInput[] | Prisma.MangaUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutTagsInput | Prisma.MangaCreateOrConnectWithoutTagsInput[]
  connect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
}

export type MangaUpdateManyWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput> | Prisma.MangaCreateWithoutTagsInput[] | Prisma.MangaUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutTagsInput | Prisma.MangaCreateOrConnectWithoutTagsInput[]
  upsert?: Prisma.MangaUpsertWithWhereUniqueWithoutTagsInput | Prisma.MangaUpsertWithWhereUniqueWithoutTagsInput[]
  set?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  disconnect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  delete?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  connect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  update?: Prisma.MangaUpdateWithWhereUniqueWithoutTagsInput | Prisma.MangaUpdateWithWhereUniqueWithoutTagsInput[]
  updateMany?: Prisma.MangaUpdateManyWithWhereWithoutTagsInput | Prisma.MangaUpdateManyWithWhereWithoutTagsInput[]
  deleteMany?: Prisma.MangaScalarWhereInput | Prisma.MangaScalarWhereInput[]
}

export type MangaUncheckedUpdateManyWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput> | Prisma.MangaCreateWithoutTagsInput[] | Prisma.MangaUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutTagsInput | Prisma.MangaCreateOrConnectWithoutTagsInput[]
  upsert?: Prisma.MangaUpsertWithWhereUniqueWithoutTagsInput | Prisma.MangaUpsertWithWhereUniqueWithoutTagsInput[]
  set?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  disconnect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  delete?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  connect?: Prisma.MangaWhereUniqueInput | Prisma.MangaWhereUniqueInput[]
  update?: Prisma.MangaUpdateWithWhereUniqueWithoutTagsInput | Prisma.MangaUpdateWithWhereUniqueWithoutTagsInput[]
  updateMany?: Prisma.MangaUpdateManyWithWhereWithoutTagsInput | Prisma.MangaUpdateManyWithWhereWithoutTagsInput[]
  deleteMany?: Prisma.MangaScalarWhereInput | Prisma.MangaScalarWhereInput[]
}

export type MangaCreateNestedOneWithoutChaptersInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutChaptersInput, Prisma.MangaUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutChaptersInput
  connect?: Prisma.MangaWhereUniqueInput
}

export type MangaUpdateOneRequiredWithoutChaptersNestedInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutChaptersInput, Prisma.MangaUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutChaptersInput
  upsert?: Prisma.MangaUpsertWithoutChaptersInput
  connect?: Prisma.MangaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MangaUpdateToOneWithWhereWithoutChaptersInput, Prisma.MangaUpdateWithoutChaptersInput>, Prisma.MangaUncheckedUpdateWithoutChaptersInput>
}

export type MangaCreateNestedOneWithoutAuthorsInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutAuthorsInput, Prisma.MangaUncheckedCreateWithoutAuthorsInput>
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutAuthorsInput
  connect?: Prisma.MangaWhereUniqueInput
}

export type MangaUpdateOneRequiredWithoutAuthorsNestedInput = {
  create?: Prisma.XOR<Prisma.MangaCreateWithoutAuthorsInput, Prisma.MangaUncheckedCreateWithoutAuthorsInput>
  connectOrCreate?: Prisma.MangaCreateOrConnectWithoutAuthorsInput
  upsert?: Prisma.MangaUpsertWithoutAuthorsInput
  connect?: Prisma.MangaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MangaUpdateToOneWithWhereWithoutAuthorsInput, Prisma.MangaUpdateWithoutAuthorsInput>, Prisma.MangaUncheckedUpdateWithoutAuthorsInput>
}

export type MangaCreateWithoutTagsInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorCreateNestedManyWithoutMangaInput
  chapters?: Prisma.ChapterCreateNestedManyWithoutMangaInput
}

export type MangaUncheckedCreateWithoutTagsInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorUncheckedCreateNestedManyWithoutMangaInput
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutMangaInput
}

export type MangaCreateOrConnectWithoutTagsInput = {
  where: Prisma.MangaWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput>
}

export type MangaUpsertWithWhereUniqueWithoutTagsInput = {
  where: Prisma.MangaWhereUniqueInput
  update: Prisma.XOR<Prisma.MangaUpdateWithoutTagsInput, Prisma.MangaUncheckedUpdateWithoutTagsInput>
  create: Prisma.XOR<Prisma.MangaCreateWithoutTagsInput, Prisma.MangaUncheckedCreateWithoutTagsInput>
}

export type MangaUpdateWithWhereUniqueWithoutTagsInput = {
  where: Prisma.MangaWhereUniqueInput
  data: Prisma.XOR<Prisma.MangaUpdateWithoutTagsInput, Prisma.MangaUncheckedUpdateWithoutTagsInput>
}

export type MangaUpdateManyWithWhereWithoutTagsInput = {
  where: Prisma.MangaScalarWhereInput
  data: Prisma.XOR<Prisma.MangaUpdateManyMutationInput, Prisma.MangaUncheckedUpdateManyWithoutTagsInput>
}

export type MangaScalarWhereInput = {
  AND?: Prisma.MangaScalarWhereInput | Prisma.MangaScalarWhereInput[]
  OR?: Prisma.MangaScalarWhereInput[]
  NOT?: Prisma.MangaScalarWhereInput | Prisma.MangaScalarWhereInput[]
  id?: Prisma.StringFilter<"Manga"> | string
  title?: Prisma.StringFilter<"Manga"> | string
  alternativeTitles?: Prisma.StringNullableListFilter<"Manga">
  description?: Prisma.StringNullableFilter<"Manga"> | string | null
  originalLanguage?: Prisma.StringFilter<"Manga"> | string
  publicationDemographic?: Prisma.EnumDemographicEnumNullableFilter<"Manga"> | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFilter<"Manga"> | $Enums.StatusEnum
  year?: Prisma.IntNullableFilter<"Manga"> | number | null
  contentRating?: Prisma.EnumContentRatingEnumFilter<"Manga"> | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFilter<"Manga"> | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manga"> | Date | string
}

export type MangaCreateWithoutChaptersInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorCreateNestedManyWithoutMangaInput
  tags?: Prisma.TagCreateNestedManyWithoutMangasInput
}

export type MangaUncheckedCreateWithoutChaptersInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  authors?: Prisma.MangaAuthorUncheckedCreateNestedManyWithoutMangaInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutMangasInput
}

export type MangaCreateOrConnectWithoutChaptersInput = {
  where: Prisma.MangaWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaCreateWithoutChaptersInput, Prisma.MangaUncheckedCreateWithoutChaptersInput>
}

export type MangaUpsertWithoutChaptersInput = {
  update: Prisma.XOR<Prisma.MangaUpdateWithoutChaptersInput, Prisma.MangaUncheckedUpdateWithoutChaptersInput>
  create: Prisma.XOR<Prisma.MangaCreateWithoutChaptersInput, Prisma.MangaUncheckedCreateWithoutChaptersInput>
  where?: Prisma.MangaWhereInput
}

export type MangaUpdateToOneWithWhereWithoutChaptersInput = {
  where?: Prisma.MangaWhereInput
  data: Prisma.XOR<Prisma.MangaUpdateWithoutChaptersInput, Prisma.MangaUncheckedUpdateWithoutChaptersInput>
}

export type MangaUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUpdateManyWithoutMangaNestedInput
  tags?: Prisma.TagUpdateManyWithoutMangasNestedInput
}

export type MangaUncheckedUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUncheckedUpdateManyWithoutMangaNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutMangasNestedInput
}

export type MangaCreateWithoutAuthorsInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.TagCreateNestedManyWithoutMangasInput
  chapters?: Prisma.ChapterCreateNestedManyWithoutMangaInput
}

export type MangaUncheckedCreateWithoutAuthorsInput = {
  id?: string
  title: string
  alternativeTitles?: Prisma.MangaCreatealternativeTitlesInput | string[]
  description?: string | null
  originalLanguage: string
  publicationDemographic?: $Enums.DemographicEnum | null
  status: $Enums.StatusEnum
  year?: number | null
  contentRating: $Enums.ContentRatingEnum
  state: $Enums.StateEnum
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutMangasInput
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutMangaInput
}

export type MangaCreateOrConnectWithoutAuthorsInput = {
  where: Prisma.MangaWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaCreateWithoutAuthorsInput, Prisma.MangaUncheckedCreateWithoutAuthorsInput>
}

export type MangaUpsertWithoutAuthorsInput = {
  update: Prisma.XOR<Prisma.MangaUpdateWithoutAuthorsInput, Prisma.MangaUncheckedUpdateWithoutAuthorsInput>
  create: Prisma.XOR<Prisma.MangaCreateWithoutAuthorsInput, Prisma.MangaUncheckedCreateWithoutAuthorsInput>
  where?: Prisma.MangaWhereInput
}

export type MangaUpdateToOneWithWhereWithoutAuthorsInput = {
  where?: Prisma.MangaWhereInput
  data: Prisma.XOR<Prisma.MangaUpdateWithoutAuthorsInput, Prisma.MangaUncheckedUpdateWithoutAuthorsInput>
}

export type MangaUpdateWithoutAuthorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.TagUpdateManyWithoutMangasNestedInput
  chapters?: Prisma.ChapterUpdateManyWithoutMangaNestedInput
}

export type MangaUncheckedUpdateWithoutAuthorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.TagUncheckedUpdateManyWithoutMangasNestedInput
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutMangaNestedInput
}

export type MangaUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUpdateManyWithoutMangaNestedInput
  chapters?: Prisma.ChapterUpdateManyWithoutMangaNestedInput
}

export type MangaUncheckedUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  authors?: Prisma.MangaAuthorUncheckedUpdateManyWithoutMangaNestedInput
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutMangaNestedInput
}

export type MangaUncheckedUpdateManyWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  alternativeTitles?: Prisma.MangaUpdatealternativeTitlesInput | string[]
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originalLanguage?: Prisma.StringFieldUpdateOperationsInput | string
  publicationDemographic?: Prisma.NullableEnumDemographicEnumFieldUpdateOperationsInput | $Enums.DemographicEnum | null
  status?: Prisma.EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  contentRating?: Prisma.EnumContentRatingEnumFieldUpdateOperationsInput | $Enums.ContentRatingEnum
  state?: Prisma.EnumStateEnumFieldUpdateOperationsInput | $Enums.StateEnum
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MangaCountOutputType
 */

export type MangaCountOutputType = {
  authors: number
  tags: number
  chapters: number
}

export type MangaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  authors?: boolean | MangaCountOutputTypeCountAuthorsArgs
  tags?: boolean | MangaCountOutputTypeCountTagsArgs
  chapters?: boolean | MangaCountOutputTypeCountChaptersArgs
}

/**
 * MangaCountOutputType without action
 */
export type MangaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaCountOutputType
   */
  select?: Prisma.MangaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MangaCountOutputType without action
 */
export type MangaCountOutputTypeCountAuthorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MangaAuthorWhereInput
}

/**
 * MangaCountOutputType without action
 */
export type MangaCountOutputTypeCountTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TagWhereInput
}

/**
 * MangaCountOutputType without action
 */
export type MangaCountOutputTypeCountChaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChapterWhereInput
}


export type MangaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  alternativeTitles?: boolean
  description?: boolean
  originalLanguage?: boolean
  publicationDemographic?: boolean
  status?: boolean
  year?: boolean
  contentRating?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  authors?: boolean | Prisma.Manga$authorsArgs<ExtArgs>
  tags?: boolean | Prisma.Manga$tagsArgs<ExtArgs>
  chapters?: boolean | Prisma.Manga$chaptersArgs<ExtArgs>
  _count?: boolean | Prisma.MangaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manga"]>

export type MangaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  alternativeTitles?: boolean
  description?: boolean
  originalLanguage?: boolean
  publicationDemographic?: boolean
  status?: boolean
  year?: boolean
  contentRating?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["manga"]>

export type MangaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  alternativeTitles?: boolean
  description?: boolean
  originalLanguage?: boolean
  publicationDemographic?: boolean
  status?: boolean
  year?: boolean
  contentRating?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["manga"]>

export type MangaSelectScalar = {
  id?: boolean
  title?: boolean
  alternativeTitles?: boolean
  description?: boolean
  originalLanguage?: boolean
  publicationDemographic?: boolean
  status?: boolean
  year?: boolean
  contentRating?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MangaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "alternativeTitles" | "description" | "originalLanguage" | "publicationDemographic" | "status" | "year" | "contentRating" | "state" | "createdAt" | "updatedAt", ExtArgs["result"]["manga"]>
export type MangaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  authors?: boolean | Prisma.Manga$authorsArgs<ExtArgs>
  tags?: boolean | Prisma.Manga$tagsArgs<ExtArgs>
  chapters?: boolean | Prisma.Manga$chaptersArgs<ExtArgs>
  _count?: boolean | Prisma.MangaCountOutputTypeDefaultArgs<ExtArgs>
}
export type MangaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MangaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MangaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Manga"
  objects: {
    authors: Prisma.$MangaAuthorPayload<ExtArgs>[]
    tags: Prisma.$TagPayload<ExtArgs>[]
    chapters: Prisma.$ChapterPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    alternativeTitles: string[]
    description: string | null
    originalLanguage: string
    publicationDemographic: $Enums.DemographicEnum | null
    status: $Enums.StatusEnum
    year: number | null
    contentRating: $Enums.ContentRatingEnum
    state: $Enums.StateEnum
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["manga"]>
  composites: {}
}

export type MangaGetPayload<S extends boolean | null | undefined | MangaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MangaPayload, S>

export type MangaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MangaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MangaCountAggregateInputType | true
  }

export interface MangaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manga'], meta: { name: 'Manga' } }
  /**
   * Find zero or one Manga that matches the filter.
   * @param {MangaFindUniqueArgs} args - Arguments to find a Manga
   * @example
   * // Get one Manga
   * const manga = await prisma.manga.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MangaFindUniqueArgs>(args: Prisma.SelectSubset<T, MangaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Manga that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MangaFindUniqueOrThrowArgs} args - Arguments to find a Manga
   * @example
   * // Get one Manga
   * const manga = await prisma.manga.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MangaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MangaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manga that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFindFirstArgs} args - Arguments to find a Manga
   * @example
   * // Get one Manga
   * const manga = await prisma.manga.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MangaFindFirstArgs>(args?: Prisma.SelectSubset<T, MangaFindFirstArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manga that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFindFirstOrThrowArgs} args - Arguments to find a Manga
   * @example
   * // Get one Manga
   * const manga = await prisma.manga.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MangaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MangaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Manga that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Manga
   * const manga = await prisma.manga.findMany()
   * 
   * // Get first 10 Manga
   * const manga = await prisma.manga.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mangaWithIdOnly = await prisma.manga.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MangaFindManyArgs>(args?: Prisma.SelectSubset<T, MangaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Manga.
   * @param {MangaCreateArgs} args - Arguments to create a Manga.
   * @example
   * // Create one Manga
   * const Manga = await prisma.manga.create({
   *   data: {
   *     // ... data to create a Manga
   *   }
   * })
   * 
   */
  create<T extends MangaCreateArgs>(args: Prisma.SelectSubset<T, MangaCreateArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Manga.
   * @param {MangaCreateManyArgs} args - Arguments to create many Manga.
   * @example
   * // Create many Manga
   * const manga = await prisma.manga.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MangaCreateManyArgs>(args?: Prisma.SelectSubset<T, MangaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Manga and returns the data saved in the database.
   * @param {MangaCreateManyAndReturnArgs} args - Arguments to create many Manga.
   * @example
   * // Create many Manga
   * const manga = await prisma.manga.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Manga and only return the `id`
   * const mangaWithIdOnly = await prisma.manga.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MangaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MangaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Manga.
   * @param {MangaDeleteArgs} args - Arguments to delete one Manga.
   * @example
   * // Delete one Manga
   * const Manga = await prisma.manga.delete({
   *   where: {
   *     // ... filter to delete one Manga
   *   }
   * })
   * 
   */
  delete<T extends MangaDeleteArgs>(args: Prisma.SelectSubset<T, MangaDeleteArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Manga.
   * @param {MangaUpdateArgs} args - Arguments to update one Manga.
   * @example
   * // Update one Manga
   * const manga = await prisma.manga.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MangaUpdateArgs>(args: Prisma.SelectSubset<T, MangaUpdateArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Manga.
   * @param {MangaDeleteManyArgs} args - Arguments to filter Manga to delete.
   * @example
   * // Delete a few Manga
   * const { count } = await prisma.manga.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MangaDeleteManyArgs>(args?: Prisma.SelectSubset<T, MangaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Manga.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Manga
   * const manga = await prisma.manga.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MangaUpdateManyArgs>(args: Prisma.SelectSubset<T, MangaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Manga and returns the data updated in the database.
   * @param {MangaUpdateManyAndReturnArgs} args - Arguments to update many Manga.
   * @example
   * // Update many Manga
   * const manga = await prisma.manga.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Manga and only return the `id`
   * const mangaWithIdOnly = await prisma.manga.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MangaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MangaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Manga.
   * @param {MangaUpsertArgs} args - Arguments to update or create a Manga.
   * @example
   * // Update or create a Manga
   * const manga = await prisma.manga.upsert({
   *   create: {
   *     // ... data to create a Manga
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Manga we want to update
   *   }
   * })
   */
  upsert<T extends MangaUpsertArgs>(args: Prisma.SelectSubset<T, MangaUpsertArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Manga.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaCountArgs} args - Arguments to filter Manga to count.
   * @example
   * // Count the number of Manga
   * const count = await prisma.manga.count({
   *   where: {
   *     // ... the filter for the Manga we want to count
   *   }
   * })
  **/
  count<T extends MangaCountArgs>(
    args?: Prisma.Subset<T, MangaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MangaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Manga.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MangaAggregateArgs>(args: Prisma.Subset<T, MangaAggregateArgs>): Prisma.PrismaPromise<GetMangaAggregateType<T>>

  /**
   * Group by Manga.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MangaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MangaGroupByArgs['orderBy'] }
      : { orderBy?: MangaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MangaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMangaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Manga model
 */
readonly fields: MangaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Manga.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MangaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  authors<T extends Prisma.Manga$authorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Manga$authorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tags<T extends Prisma.Manga$tagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Manga$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  chapters<T extends Prisma.Manga$chaptersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Manga$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Manga model
 */
export interface MangaFieldRefs {
  readonly id: Prisma.FieldRef<"Manga", 'String'>
  readonly title: Prisma.FieldRef<"Manga", 'String'>
  readonly alternativeTitles: Prisma.FieldRef<"Manga", 'String[]'>
  readonly description: Prisma.FieldRef<"Manga", 'String'>
  readonly originalLanguage: Prisma.FieldRef<"Manga", 'String'>
  readonly publicationDemographic: Prisma.FieldRef<"Manga", 'DemographicEnum'>
  readonly status: Prisma.FieldRef<"Manga", 'StatusEnum'>
  readonly year: Prisma.FieldRef<"Manga", 'Int'>
  readonly contentRating: Prisma.FieldRef<"Manga", 'ContentRatingEnum'>
  readonly state: Prisma.FieldRef<"Manga", 'StateEnum'>
  readonly createdAt: Prisma.FieldRef<"Manga", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Manga", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Manga findUnique
 */
export type MangaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter, which Manga to fetch.
   */
  where: Prisma.MangaWhereUniqueInput
}

/**
 * Manga findUniqueOrThrow
 */
export type MangaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter, which Manga to fetch.
   */
  where: Prisma.MangaWhereUniqueInput
}

/**
 * Manga findFirst
 */
export type MangaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter, which Manga to fetch.
   */
  where?: Prisma.MangaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Manga to fetch.
   */
  orderBy?: Prisma.MangaOrderByWithRelationInput | Prisma.MangaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Manga.
   */
  cursor?: Prisma.MangaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Manga from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Manga.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Manga.
   */
  distinct?: Prisma.MangaScalarFieldEnum | Prisma.MangaScalarFieldEnum[]
}

/**
 * Manga findFirstOrThrow
 */
export type MangaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter, which Manga to fetch.
   */
  where?: Prisma.MangaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Manga to fetch.
   */
  orderBy?: Prisma.MangaOrderByWithRelationInput | Prisma.MangaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Manga.
   */
  cursor?: Prisma.MangaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Manga from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Manga.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Manga.
   */
  distinct?: Prisma.MangaScalarFieldEnum | Prisma.MangaScalarFieldEnum[]
}

/**
 * Manga findMany
 */
export type MangaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter, which Manga to fetch.
   */
  where?: Prisma.MangaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Manga to fetch.
   */
  orderBy?: Prisma.MangaOrderByWithRelationInput | Prisma.MangaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Manga.
   */
  cursor?: Prisma.MangaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Manga from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Manga.
   */
  skip?: number
  distinct?: Prisma.MangaScalarFieldEnum | Prisma.MangaScalarFieldEnum[]
}

/**
 * Manga create
 */
export type MangaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * The data needed to create a Manga.
   */
  data: Prisma.XOR<Prisma.MangaCreateInput, Prisma.MangaUncheckedCreateInput>
}

/**
 * Manga createMany
 */
export type MangaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Manga.
   */
  data: Prisma.MangaCreateManyInput | Prisma.MangaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Manga createManyAndReturn
 */
export type MangaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * The data used to create many Manga.
   */
  data: Prisma.MangaCreateManyInput | Prisma.MangaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Manga update
 */
export type MangaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * The data needed to update a Manga.
   */
  data: Prisma.XOR<Prisma.MangaUpdateInput, Prisma.MangaUncheckedUpdateInput>
  /**
   * Choose, which Manga to update.
   */
  where: Prisma.MangaWhereUniqueInput
}

/**
 * Manga updateMany
 */
export type MangaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Manga.
   */
  data: Prisma.XOR<Prisma.MangaUpdateManyMutationInput, Prisma.MangaUncheckedUpdateManyInput>
  /**
   * Filter which Manga to update
   */
  where?: Prisma.MangaWhereInput
  /**
   * Limit how many Manga to update.
   */
  limit?: number
}

/**
 * Manga updateManyAndReturn
 */
export type MangaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * The data used to update Manga.
   */
  data: Prisma.XOR<Prisma.MangaUpdateManyMutationInput, Prisma.MangaUncheckedUpdateManyInput>
  /**
   * Filter which Manga to update
   */
  where?: Prisma.MangaWhereInput
  /**
   * Limit how many Manga to update.
   */
  limit?: number
}

/**
 * Manga upsert
 */
export type MangaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * The filter to search for the Manga to update in case it exists.
   */
  where: Prisma.MangaWhereUniqueInput
  /**
   * In case the Manga found by the `where` argument doesn't exist, create a new Manga with this data.
   */
  create: Prisma.XOR<Prisma.MangaCreateInput, Prisma.MangaUncheckedCreateInput>
  /**
   * In case the Manga was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MangaUpdateInput, Prisma.MangaUncheckedUpdateInput>
}

/**
 * Manga delete
 */
export type MangaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
  /**
   * Filter which Manga to delete.
   */
  where: Prisma.MangaWhereUniqueInput
}

/**
 * Manga deleteMany
 */
export type MangaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Manga to delete
   */
  where?: Prisma.MangaWhereInput
  /**
   * Limit how many Manga to delete.
   */
  limit?: number
}

/**
 * Manga.authors
 */
export type Manga$authorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  where?: Prisma.MangaAuthorWhereInput
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MangaAuthorScalarFieldEnum | Prisma.MangaAuthorScalarFieldEnum[]
}

/**
 * Manga.tags
 */
export type Manga$tagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tag
   */
  select?: Prisma.TagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tag
   */
  omit?: Prisma.TagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagInclude<ExtArgs> | null
  where?: Prisma.TagWhereInput
  orderBy?: Prisma.TagOrderByWithRelationInput | Prisma.TagOrderByWithRelationInput[]
  cursor?: Prisma.TagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TagScalarFieldEnum | Prisma.TagScalarFieldEnum[]
}

/**
 * Manga.chapters
 */
export type Manga$chaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chapter
   */
  select?: Prisma.ChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chapter
   */
  omit?: Prisma.ChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChapterInclude<ExtArgs> | null
  where?: Prisma.ChapterWhereInput
  orderBy?: Prisma.ChapterOrderByWithRelationInput | Prisma.ChapterOrderByWithRelationInput[]
  cursor?: Prisma.ChapterWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChapterScalarFieldEnum | Prisma.ChapterScalarFieldEnum[]
}

/**
 * Manga without action
 */
export type MangaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manga
   */
  select?: Prisma.MangaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manga
   */
  omit?: Prisma.MangaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaInclude<ExtArgs> | null
}
