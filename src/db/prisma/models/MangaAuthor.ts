
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MangaAuthor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model MangaAuthor
 * 
 */
export type MangaAuthorModel = runtime.Types.Result.DefaultSelection<Prisma.$MangaAuthorPayload>

export type AggregateMangaAuthor = {
  _count: MangaAuthorCountAggregateOutputType | null
  _avg: MangaAuthorAvgAggregateOutputType | null
  _sum: MangaAuthorSumAggregateOutputType | null
  _min: MangaAuthorMinAggregateOutputType | null
  _max: MangaAuthorMaxAggregateOutputType | null
}

export type MangaAuthorAvgAggregateOutputType = {
  id: number | null
}

export type MangaAuthorSumAggregateOutputType = {
  id: number | null
}

export type MangaAuthorMinAggregateOutputType = {
  id: number | null
  mangaId: string | null
  authorId: string | null
  role: $Enums.MangaAuthorRoleEnum | null
}

export type MangaAuthorMaxAggregateOutputType = {
  id: number | null
  mangaId: string | null
  authorId: string | null
  role: $Enums.MangaAuthorRoleEnum | null
}

export type MangaAuthorCountAggregateOutputType = {
  id: number
  mangaId: number
  authorId: number
  role: number
  _all: number
}


export type MangaAuthorAvgAggregateInputType = {
  id?: true
}

export type MangaAuthorSumAggregateInputType = {
  id?: true
}

export type MangaAuthorMinAggregateInputType = {
  id?: true
  mangaId?: true
  authorId?: true
  role?: true
}

export type MangaAuthorMaxAggregateInputType = {
  id?: true
  mangaId?: true
  authorId?: true
  role?: true
}

export type MangaAuthorCountAggregateInputType = {
  id?: true
  mangaId?: true
  authorId?: true
  role?: true
  _all?: true
}

export type MangaAuthorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MangaAuthor to aggregate.
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaAuthors to fetch.
   */
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MangaAuthors
  **/
  _count?: true | MangaAuthorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MangaAuthorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MangaAuthorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MangaAuthorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MangaAuthorMaxAggregateInputType
}

export type GetMangaAuthorAggregateType<T extends MangaAuthorAggregateArgs> = {
      [P in keyof T & keyof AggregateMangaAuthor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMangaAuthor[P]>
    : Prisma.GetScalarType<T[P], AggregateMangaAuthor[P]>
}




export type MangaAuthorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MangaAuthorWhereInput
  orderBy?: Prisma.MangaAuthorOrderByWithAggregationInput | Prisma.MangaAuthorOrderByWithAggregationInput[]
  by: Prisma.MangaAuthorScalarFieldEnum[] | Prisma.MangaAuthorScalarFieldEnum
  having?: Prisma.MangaAuthorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MangaAuthorCountAggregateInputType | true
  _avg?: MangaAuthorAvgAggregateInputType
  _sum?: MangaAuthorSumAggregateInputType
  _min?: MangaAuthorMinAggregateInputType
  _max?: MangaAuthorMaxAggregateInputType
}

export type MangaAuthorGroupByOutputType = {
  id: number
  mangaId: string
  authorId: string
  role: $Enums.MangaAuthorRoleEnum
  _count: MangaAuthorCountAggregateOutputType | null
  _avg: MangaAuthorAvgAggregateOutputType | null
  _sum: MangaAuthorSumAggregateOutputType | null
  _min: MangaAuthorMinAggregateOutputType | null
  _max: MangaAuthorMaxAggregateOutputType | null
}

type GetMangaAuthorGroupByPayload<T extends MangaAuthorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MangaAuthorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MangaAuthorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MangaAuthorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MangaAuthorGroupByOutputType[P]>
      }
    >
  > 



export type MangaAuthorWhereInput = {
  AND?: Prisma.MangaAuthorWhereInput | Prisma.MangaAuthorWhereInput[]
  OR?: Prisma.MangaAuthorWhereInput[]
  NOT?: Prisma.MangaAuthorWhereInput | Prisma.MangaAuthorWhereInput[]
  id?: Prisma.IntFilter<"MangaAuthor"> | number
  mangaId?: Prisma.StringFilter<"MangaAuthor"> | string
  authorId?: Prisma.StringFilter<"MangaAuthor"> | string
  role?: Prisma.EnumMangaAuthorRoleEnumFilter<"MangaAuthor"> | $Enums.MangaAuthorRoleEnum
  manga?: Prisma.XOR<Prisma.MangaScalarRelationFilter, Prisma.MangaWhereInput>
  author?: Prisma.XOR<Prisma.AuthorScalarRelationFilter, Prisma.AuthorWhereInput>
}

export type MangaAuthorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  manga?: Prisma.MangaOrderByWithRelationInput
  author?: Prisma.AuthorOrderByWithRelationInput
}

export type MangaAuthorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mangaId_authorId?: Prisma.MangaAuthorMangaIdAuthorIdCompoundUniqueInput
  AND?: Prisma.MangaAuthorWhereInput | Prisma.MangaAuthorWhereInput[]
  OR?: Prisma.MangaAuthorWhereInput[]
  NOT?: Prisma.MangaAuthorWhereInput | Prisma.MangaAuthorWhereInput[]
  mangaId?: Prisma.StringFilter<"MangaAuthor"> | string
  authorId?: Prisma.StringFilter<"MangaAuthor"> | string
  role?: Prisma.EnumMangaAuthorRoleEnumFilter<"MangaAuthor"> | $Enums.MangaAuthorRoleEnum
  manga?: Prisma.XOR<Prisma.MangaScalarRelationFilter, Prisma.MangaWhereInput>
  author?: Prisma.XOR<Prisma.AuthorScalarRelationFilter, Prisma.AuthorWhereInput>
}, "id" | "mangaId_authorId">

export type MangaAuthorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.MangaAuthorCountOrderByAggregateInput
  _avg?: Prisma.MangaAuthorAvgOrderByAggregateInput
  _max?: Prisma.MangaAuthorMaxOrderByAggregateInput
  _min?: Prisma.MangaAuthorMinOrderByAggregateInput
  _sum?: Prisma.MangaAuthorSumOrderByAggregateInput
}

export type MangaAuthorScalarWhereWithAggregatesInput = {
  AND?: Prisma.MangaAuthorScalarWhereWithAggregatesInput | Prisma.MangaAuthorScalarWhereWithAggregatesInput[]
  OR?: Prisma.MangaAuthorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MangaAuthorScalarWhereWithAggregatesInput | Prisma.MangaAuthorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MangaAuthor"> | number
  mangaId?: Prisma.StringWithAggregatesFilter<"MangaAuthor"> | string
  authorId?: Prisma.StringWithAggregatesFilter<"MangaAuthor"> | string
  role?: Prisma.EnumMangaAuthorRoleEnumWithAggregatesFilter<"MangaAuthor"> | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateInput = {
  role: $Enums.MangaAuthorRoleEnum
  manga: Prisma.MangaCreateNestedOneWithoutAuthorsInput
  author: Prisma.AuthorCreateNestedOneWithoutMangasInput
}

export type MangaAuthorUncheckedCreateInput = {
  id?: number
  mangaId: string
  authorId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUpdateInput = {
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
  manga?: Prisma.MangaUpdateOneRequiredWithoutAuthorsNestedInput
  author?: Prisma.AuthorUpdateOneRequiredWithoutMangasNestedInput
}

export type MangaAuthorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateManyInput = {
  id?: number
  mangaId: string
  authorId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUpdateManyMutationInput = {
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorListRelationFilter = {
  every?: Prisma.MangaAuthorWhereInput
  some?: Prisma.MangaAuthorWhereInput
  none?: Prisma.MangaAuthorWhereInput
}

export type MangaAuthorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MangaAuthorMangaIdAuthorIdCompoundUniqueInput = {
  mangaId: string
  authorId: string
}

export type MangaAuthorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type MangaAuthorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MangaAuthorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type MangaAuthorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type MangaAuthorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MangaAuthorCreateNestedManyWithoutMangaInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput> | Prisma.MangaAuthorCreateWithoutMangaInput[] | Prisma.MangaAuthorUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutMangaInput | Prisma.MangaAuthorCreateOrConnectWithoutMangaInput[]
  createMany?: Prisma.MangaAuthorCreateManyMangaInputEnvelope
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
}

export type MangaAuthorUncheckedCreateNestedManyWithoutMangaInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput> | Prisma.MangaAuthorCreateWithoutMangaInput[] | Prisma.MangaAuthorUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutMangaInput | Prisma.MangaAuthorCreateOrConnectWithoutMangaInput[]
  createMany?: Prisma.MangaAuthorCreateManyMangaInputEnvelope
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
}

export type MangaAuthorUpdateManyWithoutMangaNestedInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput> | Prisma.MangaAuthorCreateWithoutMangaInput[] | Prisma.MangaAuthorUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutMangaInput | Prisma.MangaAuthorCreateOrConnectWithoutMangaInput[]
  upsert?: Prisma.MangaAuthorUpsertWithWhereUniqueWithoutMangaInput | Prisma.MangaAuthorUpsertWithWhereUniqueWithoutMangaInput[]
  createMany?: Prisma.MangaAuthorCreateManyMangaInputEnvelope
  set?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  disconnect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  delete?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  update?: Prisma.MangaAuthorUpdateWithWhereUniqueWithoutMangaInput | Prisma.MangaAuthorUpdateWithWhereUniqueWithoutMangaInput[]
  updateMany?: Prisma.MangaAuthorUpdateManyWithWhereWithoutMangaInput | Prisma.MangaAuthorUpdateManyWithWhereWithoutMangaInput[]
  deleteMany?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
}

export type MangaAuthorUncheckedUpdateManyWithoutMangaNestedInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput> | Prisma.MangaAuthorCreateWithoutMangaInput[] | Prisma.MangaAuthorUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutMangaInput | Prisma.MangaAuthorCreateOrConnectWithoutMangaInput[]
  upsert?: Prisma.MangaAuthorUpsertWithWhereUniqueWithoutMangaInput | Prisma.MangaAuthorUpsertWithWhereUniqueWithoutMangaInput[]
  createMany?: Prisma.MangaAuthorCreateManyMangaInputEnvelope
  set?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  disconnect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  delete?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  update?: Prisma.MangaAuthorUpdateWithWhereUniqueWithoutMangaInput | Prisma.MangaAuthorUpdateWithWhereUniqueWithoutMangaInput[]
  updateMany?: Prisma.MangaAuthorUpdateManyWithWhereWithoutMangaInput | Prisma.MangaAuthorUpdateManyWithWhereWithoutMangaInput[]
  deleteMany?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
}

export type MangaAuthorCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput> | Prisma.MangaAuthorCreateWithoutAuthorInput[] | Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput | Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.MangaAuthorCreateManyAuthorInputEnvelope
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
}

export type MangaAuthorUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput> | Prisma.MangaAuthorCreateWithoutAuthorInput[] | Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput | Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.MangaAuthorCreateManyAuthorInputEnvelope
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
}

export type MangaAuthorUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput> | Prisma.MangaAuthorCreateWithoutAuthorInput[] | Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput | Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.MangaAuthorUpsertWithWhereUniqueWithoutAuthorInput | Prisma.MangaAuthorUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.MangaAuthorCreateManyAuthorInputEnvelope
  set?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  disconnect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  delete?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  update?: Prisma.MangaAuthorUpdateWithWhereUniqueWithoutAuthorInput | Prisma.MangaAuthorUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.MangaAuthorUpdateManyWithWhereWithoutAuthorInput | Prisma.MangaAuthorUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
}

export type MangaAuthorUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput> | Prisma.MangaAuthorCreateWithoutAuthorInput[] | Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput | Prisma.MangaAuthorCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.MangaAuthorUpsertWithWhereUniqueWithoutAuthorInput | Prisma.MangaAuthorUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.MangaAuthorCreateManyAuthorInputEnvelope
  set?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  disconnect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  delete?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  connect?: Prisma.MangaAuthorWhereUniqueInput | Prisma.MangaAuthorWhereUniqueInput[]
  update?: Prisma.MangaAuthorUpdateWithWhereUniqueWithoutAuthorInput | Prisma.MangaAuthorUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.MangaAuthorUpdateManyWithWhereWithoutAuthorInput | Prisma.MangaAuthorUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
}

export type EnumMangaAuthorRoleEnumFieldUpdateOperationsInput = {
  set?: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateWithoutMangaInput = {
  role: $Enums.MangaAuthorRoleEnum
  author: Prisma.AuthorCreateNestedOneWithoutMangasInput
}

export type MangaAuthorUncheckedCreateWithoutMangaInput = {
  id?: number
  authorId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateOrConnectWithoutMangaInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput>
}

export type MangaAuthorCreateManyMangaInputEnvelope = {
  data: Prisma.MangaAuthorCreateManyMangaInput | Prisma.MangaAuthorCreateManyMangaInput[]
  skipDuplicates?: boolean
}

export type MangaAuthorUpsertWithWhereUniqueWithoutMangaInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  update: Prisma.XOR<Prisma.MangaAuthorUpdateWithoutMangaInput, Prisma.MangaAuthorUncheckedUpdateWithoutMangaInput>
  create: Prisma.XOR<Prisma.MangaAuthorCreateWithoutMangaInput, Prisma.MangaAuthorUncheckedCreateWithoutMangaInput>
}

export type MangaAuthorUpdateWithWhereUniqueWithoutMangaInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  data: Prisma.XOR<Prisma.MangaAuthorUpdateWithoutMangaInput, Prisma.MangaAuthorUncheckedUpdateWithoutMangaInput>
}

export type MangaAuthorUpdateManyWithWhereWithoutMangaInput = {
  where: Prisma.MangaAuthorScalarWhereInput
  data: Prisma.XOR<Prisma.MangaAuthorUpdateManyMutationInput, Prisma.MangaAuthorUncheckedUpdateManyWithoutMangaInput>
}

export type MangaAuthorScalarWhereInput = {
  AND?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
  OR?: Prisma.MangaAuthorScalarWhereInput[]
  NOT?: Prisma.MangaAuthorScalarWhereInput | Prisma.MangaAuthorScalarWhereInput[]
  id?: Prisma.IntFilter<"MangaAuthor"> | number
  mangaId?: Prisma.StringFilter<"MangaAuthor"> | string
  authorId?: Prisma.StringFilter<"MangaAuthor"> | string
  role?: Prisma.EnumMangaAuthorRoleEnumFilter<"MangaAuthor"> | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateWithoutAuthorInput = {
  role: $Enums.MangaAuthorRoleEnum
  manga: Prisma.MangaCreateNestedOneWithoutAuthorsInput
}

export type MangaAuthorUncheckedCreateWithoutAuthorInput = {
  id?: number
  mangaId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateOrConnectWithoutAuthorInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput>
}

export type MangaAuthorCreateManyAuthorInputEnvelope = {
  data: Prisma.MangaAuthorCreateManyAuthorInput | Prisma.MangaAuthorCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type MangaAuthorUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  update: Prisma.XOR<Prisma.MangaAuthorUpdateWithoutAuthorInput, Prisma.MangaAuthorUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.MangaAuthorCreateWithoutAuthorInput, Prisma.MangaAuthorUncheckedCreateWithoutAuthorInput>
}

export type MangaAuthorUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.MangaAuthorWhereUniqueInput
  data: Prisma.XOR<Prisma.MangaAuthorUpdateWithoutAuthorInput, Prisma.MangaAuthorUncheckedUpdateWithoutAuthorInput>
}

export type MangaAuthorUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.MangaAuthorScalarWhereInput
  data: Prisma.XOR<Prisma.MangaAuthorUpdateManyMutationInput, Prisma.MangaAuthorUncheckedUpdateManyWithoutAuthorInput>
}

export type MangaAuthorCreateManyMangaInput = {
  id?: number
  authorId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUpdateWithoutMangaInput = {
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
  author?: Prisma.AuthorUpdateOneRequiredWithoutMangasNestedInput
}

export type MangaAuthorUncheckedUpdateWithoutMangaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUncheckedUpdateManyWithoutMangaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorCreateManyAuthorInput = {
  id?: number
  mangaId: string
  role: $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUpdateWithoutAuthorInput = {
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
  manga?: Prisma.MangaUpdateOneRequiredWithoutAuthorsNestedInput
}

export type MangaAuthorUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}

export type MangaAuthorUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumMangaAuthorRoleEnumFieldUpdateOperationsInput | $Enums.MangaAuthorRoleEnum
}



export type MangaAuthorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  authorId?: boolean
  role?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaAuthor"]>

export type MangaAuthorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  authorId?: boolean
  role?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaAuthor"]>

export type MangaAuthorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  authorId?: boolean
  role?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaAuthor"]>

export type MangaAuthorSelectScalar = {
  id?: boolean
  mangaId?: boolean
  authorId?: boolean
  role?: boolean
}

export type MangaAuthorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mangaId" | "authorId" | "role", ExtArgs["result"]["mangaAuthor"]>
export type MangaAuthorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}
export type MangaAuthorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}
export type MangaAuthorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  author?: boolean | Prisma.AuthorDefaultArgs<ExtArgs>
}

export type $MangaAuthorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MangaAuthor"
  objects: {
    manga: Prisma.$MangaPayload<ExtArgs>
    author: Prisma.$AuthorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    mangaId: string
    authorId: string
    role: $Enums.MangaAuthorRoleEnum
  }, ExtArgs["result"]["mangaAuthor"]>
  composites: {}
}

export type MangaAuthorGetPayload<S extends boolean | null | undefined | MangaAuthorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload, S>

export type MangaAuthorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MangaAuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MangaAuthorCountAggregateInputType | true
  }

export interface MangaAuthorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MangaAuthor'], meta: { name: 'MangaAuthor' } }
  /**
   * Find zero or one MangaAuthor that matches the filter.
   * @param {MangaAuthorFindUniqueArgs} args - Arguments to find a MangaAuthor
   * @example
   * // Get one MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MangaAuthorFindUniqueArgs>(args: Prisma.SelectSubset<T, MangaAuthorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MangaAuthor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MangaAuthorFindUniqueOrThrowArgs} args - Arguments to find a MangaAuthor
   * @example
   * // Get one MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MangaAuthorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MangaAuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MangaAuthor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorFindFirstArgs} args - Arguments to find a MangaAuthor
   * @example
   * // Get one MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MangaAuthorFindFirstArgs>(args?: Prisma.SelectSubset<T, MangaAuthorFindFirstArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MangaAuthor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorFindFirstOrThrowArgs} args - Arguments to find a MangaAuthor
   * @example
   * // Get one MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MangaAuthorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MangaAuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MangaAuthors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MangaAuthors
   * const mangaAuthors = await prisma.mangaAuthor.findMany()
   * 
   * // Get first 10 MangaAuthors
   * const mangaAuthors = await prisma.mangaAuthor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mangaAuthorWithIdOnly = await prisma.mangaAuthor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MangaAuthorFindManyArgs>(args?: Prisma.SelectSubset<T, MangaAuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MangaAuthor.
   * @param {MangaAuthorCreateArgs} args - Arguments to create a MangaAuthor.
   * @example
   * // Create one MangaAuthor
   * const MangaAuthor = await prisma.mangaAuthor.create({
   *   data: {
   *     // ... data to create a MangaAuthor
   *   }
   * })
   * 
   */
  create<T extends MangaAuthorCreateArgs>(args: Prisma.SelectSubset<T, MangaAuthorCreateArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MangaAuthors.
   * @param {MangaAuthorCreateManyArgs} args - Arguments to create many MangaAuthors.
   * @example
   * // Create many MangaAuthors
   * const mangaAuthor = await prisma.mangaAuthor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MangaAuthorCreateManyArgs>(args?: Prisma.SelectSubset<T, MangaAuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MangaAuthors and returns the data saved in the database.
   * @param {MangaAuthorCreateManyAndReturnArgs} args - Arguments to create many MangaAuthors.
   * @example
   * // Create many MangaAuthors
   * const mangaAuthor = await prisma.mangaAuthor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MangaAuthors and only return the `id`
   * const mangaAuthorWithIdOnly = await prisma.mangaAuthor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MangaAuthorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MangaAuthorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MangaAuthor.
   * @param {MangaAuthorDeleteArgs} args - Arguments to delete one MangaAuthor.
   * @example
   * // Delete one MangaAuthor
   * const MangaAuthor = await prisma.mangaAuthor.delete({
   *   where: {
   *     // ... filter to delete one MangaAuthor
   *   }
   * })
   * 
   */
  delete<T extends MangaAuthorDeleteArgs>(args: Prisma.SelectSubset<T, MangaAuthorDeleteArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MangaAuthor.
   * @param {MangaAuthorUpdateArgs} args - Arguments to update one MangaAuthor.
   * @example
   * // Update one MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MangaAuthorUpdateArgs>(args: Prisma.SelectSubset<T, MangaAuthorUpdateArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MangaAuthors.
   * @param {MangaAuthorDeleteManyArgs} args - Arguments to filter MangaAuthors to delete.
   * @example
   * // Delete a few MangaAuthors
   * const { count } = await prisma.mangaAuthor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MangaAuthorDeleteManyArgs>(args?: Prisma.SelectSubset<T, MangaAuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MangaAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MangaAuthors
   * const mangaAuthor = await prisma.mangaAuthor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MangaAuthorUpdateManyArgs>(args: Prisma.SelectSubset<T, MangaAuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MangaAuthors and returns the data updated in the database.
   * @param {MangaAuthorUpdateManyAndReturnArgs} args - Arguments to update many MangaAuthors.
   * @example
   * // Update many MangaAuthors
   * const mangaAuthor = await prisma.mangaAuthor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MangaAuthors and only return the `id`
   * const mangaAuthorWithIdOnly = await prisma.mangaAuthor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MangaAuthorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MangaAuthorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MangaAuthor.
   * @param {MangaAuthorUpsertArgs} args - Arguments to update or create a MangaAuthor.
   * @example
   * // Update or create a MangaAuthor
   * const mangaAuthor = await prisma.mangaAuthor.upsert({
   *   create: {
   *     // ... data to create a MangaAuthor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MangaAuthor we want to update
   *   }
   * })
   */
  upsert<T extends MangaAuthorUpsertArgs>(args: Prisma.SelectSubset<T, MangaAuthorUpsertArgs<ExtArgs>>): Prisma.Prisma__MangaAuthorClient<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MangaAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorCountArgs} args - Arguments to filter MangaAuthors to count.
   * @example
   * // Count the number of MangaAuthors
   * const count = await prisma.mangaAuthor.count({
   *   where: {
   *     // ... the filter for the MangaAuthors we want to count
   *   }
   * })
  **/
  count<T extends MangaAuthorCountArgs>(
    args?: Prisma.Subset<T, MangaAuthorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MangaAuthorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MangaAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MangaAuthorAggregateArgs>(args: Prisma.Subset<T, MangaAuthorAggregateArgs>): Prisma.PrismaPromise<GetMangaAuthorAggregateType<T>>

  /**
   * Group by MangaAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaAuthorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MangaAuthorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MangaAuthorGroupByArgs['orderBy'] }
      : { orderBy?: MangaAuthorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MangaAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMangaAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MangaAuthor model
 */
readonly fields: MangaAuthorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MangaAuthor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MangaAuthorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  manga<T extends Prisma.MangaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MangaDefaultArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  author<T extends Prisma.AuthorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AuthorDefaultArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MangaAuthor model
 */
export interface MangaAuthorFieldRefs {
  readonly id: Prisma.FieldRef<"MangaAuthor", 'Int'>
  readonly mangaId: Prisma.FieldRef<"MangaAuthor", 'String'>
  readonly authorId: Prisma.FieldRef<"MangaAuthor", 'String'>
  readonly role: Prisma.FieldRef<"MangaAuthor", 'MangaAuthorRoleEnum'>
}
    

// Custom InputTypes
/**
 * MangaAuthor findUnique
 */
export type MangaAuthorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter, which MangaAuthor to fetch.
   */
  where: Prisma.MangaAuthorWhereUniqueInput
}

/**
 * MangaAuthor findUniqueOrThrow
 */
export type MangaAuthorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter, which MangaAuthor to fetch.
   */
  where: Prisma.MangaAuthorWhereUniqueInput
}

/**
 * MangaAuthor findFirst
 */
export type MangaAuthorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter, which MangaAuthor to fetch.
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaAuthors to fetch.
   */
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MangaAuthors.
   */
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MangaAuthors.
   */
  distinct?: Prisma.MangaAuthorScalarFieldEnum | Prisma.MangaAuthorScalarFieldEnum[]
}

/**
 * MangaAuthor findFirstOrThrow
 */
export type MangaAuthorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter, which MangaAuthor to fetch.
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaAuthors to fetch.
   */
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MangaAuthors.
   */
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MangaAuthors.
   */
  distinct?: Prisma.MangaAuthorScalarFieldEnum | Prisma.MangaAuthorScalarFieldEnum[]
}

/**
 * MangaAuthor findMany
 */
export type MangaAuthorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter, which MangaAuthors to fetch.
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaAuthors to fetch.
   */
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MangaAuthors.
   */
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaAuthors.
   */
  skip?: number
  distinct?: Prisma.MangaAuthorScalarFieldEnum | Prisma.MangaAuthorScalarFieldEnum[]
}

/**
 * MangaAuthor create
 */
export type MangaAuthorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * The data needed to create a MangaAuthor.
   */
  data: Prisma.XOR<Prisma.MangaAuthorCreateInput, Prisma.MangaAuthorUncheckedCreateInput>
}

/**
 * MangaAuthor createMany
 */
export type MangaAuthorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MangaAuthors.
   */
  data: Prisma.MangaAuthorCreateManyInput | Prisma.MangaAuthorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MangaAuthor createManyAndReturn
 */
export type MangaAuthorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * The data used to create many MangaAuthors.
   */
  data: Prisma.MangaAuthorCreateManyInput | Prisma.MangaAuthorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MangaAuthor update
 */
export type MangaAuthorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * The data needed to update a MangaAuthor.
   */
  data: Prisma.XOR<Prisma.MangaAuthorUpdateInput, Prisma.MangaAuthorUncheckedUpdateInput>
  /**
   * Choose, which MangaAuthor to update.
   */
  where: Prisma.MangaAuthorWhereUniqueInput
}

/**
 * MangaAuthor updateMany
 */
export type MangaAuthorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MangaAuthors.
   */
  data: Prisma.XOR<Prisma.MangaAuthorUpdateManyMutationInput, Prisma.MangaAuthorUncheckedUpdateManyInput>
  /**
   * Filter which MangaAuthors to update
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * Limit how many MangaAuthors to update.
   */
  limit?: number
}

/**
 * MangaAuthor updateManyAndReturn
 */
export type MangaAuthorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * The data used to update MangaAuthors.
   */
  data: Prisma.XOR<Prisma.MangaAuthorUpdateManyMutationInput, Prisma.MangaAuthorUncheckedUpdateManyInput>
  /**
   * Filter which MangaAuthors to update
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * Limit how many MangaAuthors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MangaAuthor upsert
 */
export type MangaAuthorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * The filter to search for the MangaAuthor to update in case it exists.
   */
  where: Prisma.MangaAuthorWhereUniqueInput
  /**
   * In case the MangaAuthor found by the `where` argument doesn't exist, create a new MangaAuthor with this data.
   */
  create: Prisma.XOR<Prisma.MangaAuthorCreateInput, Prisma.MangaAuthorUncheckedCreateInput>
  /**
   * In case the MangaAuthor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MangaAuthorUpdateInput, Prisma.MangaAuthorUncheckedUpdateInput>
}

/**
 * MangaAuthor delete
 */
export type MangaAuthorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  /**
   * Filter which MangaAuthor to delete.
   */
  where: Prisma.MangaAuthorWhereUniqueInput
}

/**
 * MangaAuthor deleteMany
 */
export type MangaAuthorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MangaAuthors to delete
   */
  where?: Prisma.MangaAuthorWhereInput
  /**
   * Limit how many MangaAuthors to delete.
   */
  limit?: number
}

/**
 * MangaAuthor without action
 */
export type MangaAuthorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
}
