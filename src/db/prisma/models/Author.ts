
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Author` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Author
 * 
 */
export type AuthorModel = runtime.Types.Result.DefaultSelection<Prisma.$AuthorPayload>

export type AggregateAuthor = {
  _count: AuthorCountAggregateOutputType | null
  _min: AuthorMinAggregateOutputType | null
  _max: AuthorMaxAggregateOutputType | null
}

export type AuthorMinAggregateOutputType = {
  id: string | null
  name: string | null
  biography: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AuthorMaxAggregateOutputType = {
  id: string | null
  name: string | null
  biography: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AuthorCountAggregateOutputType = {
  id: number
  name: number
  biography: number
  socialLinks: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AuthorMinAggregateInputType = {
  id?: true
  name?: true
  biography?: true
  createdAt?: true
  updatedAt?: true
}

export type AuthorMaxAggregateInputType = {
  id?: true
  name?: true
  biography?: true
  createdAt?: true
  updatedAt?: true
}

export type AuthorCountAggregateInputType = {
  id?: true
  name?: true
  biography?: true
  socialLinks?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AuthorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Author to aggregate.
   */
  where?: Prisma.AuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authors to fetch.
   */
  orderBy?: Prisma.AuthorOrderByWithRelationInput | Prisma.AuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Authors
  **/
  _count?: true | AuthorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AuthorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AuthorMaxAggregateInputType
}

export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
      [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuthor[P]>
    : Prisma.GetScalarType<T[P], AggregateAuthor[P]>
}




export type AuthorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuthorWhereInput
  orderBy?: Prisma.AuthorOrderByWithAggregationInput | Prisma.AuthorOrderByWithAggregationInput[]
  by: Prisma.AuthorScalarFieldEnum[] | Prisma.AuthorScalarFieldEnum
  having?: Prisma.AuthorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AuthorCountAggregateInputType | true
  _min?: AuthorMinAggregateInputType
  _max?: AuthorMaxAggregateInputType
}

export type AuthorGroupByOutputType = {
  id: string
  name: string
  biography: string | null
  socialLinks: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  _count: AuthorCountAggregateOutputType | null
  _min: AuthorMinAggregateOutputType | null
  _max: AuthorMaxAggregateOutputType | null
}

type GetAuthorGroupByPayload<T extends AuthorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AuthorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuthorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuthorGroupByOutputType[P]>
      }
    >
  > 



export type AuthorWhereInput = {
  AND?: Prisma.AuthorWhereInput | Prisma.AuthorWhereInput[]
  OR?: Prisma.AuthorWhereInput[]
  NOT?: Prisma.AuthorWhereInput | Prisma.AuthorWhereInput[]
  id?: Prisma.StringFilter<"Author"> | string
  name?: Prisma.StringFilter<"Author"> | string
  biography?: Prisma.StringNullableFilter<"Author"> | string | null
  socialLinks?: Prisma.JsonNullableFilter<"Author">
  createdAt?: Prisma.DateTimeFilter<"Author"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Author"> | Date | string
  mangas?: Prisma.MangaAuthorListRelationFilter
}

export type AuthorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  biography?: Prisma.SortOrderInput | Prisma.SortOrder
  socialLinks?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mangas?: Prisma.MangaAuthorOrderByRelationAggregateInput
}

export type AuthorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.AuthorWhereInput | Prisma.AuthorWhereInput[]
  OR?: Prisma.AuthorWhereInput[]
  NOT?: Prisma.AuthorWhereInput | Prisma.AuthorWhereInput[]
  biography?: Prisma.StringNullableFilter<"Author"> | string | null
  socialLinks?: Prisma.JsonNullableFilter<"Author">
  createdAt?: Prisma.DateTimeFilter<"Author"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Author"> | Date | string
  mangas?: Prisma.MangaAuthorListRelationFilter
}, "id" | "name">

export type AuthorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  biography?: Prisma.SortOrderInput | Prisma.SortOrder
  socialLinks?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AuthorCountOrderByAggregateInput
  _max?: Prisma.AuthorMaxOrderByAggregateInput
  _min?: Prisma.AuthorMinOrderByAggregateInput
}

export type AuthorScalarWhereWithAggregatesInput = {
  AND?: Prisma.AuthorScalarWhereWithAggregatesInput | Prisma.AuthorScalarWhereWithAggregatesInput[]
  OR?: Prisma.AuthorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AuthorScalarWhereWithAggregatesInput | Prisma.AuthorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Author"> | string
  name?: Prisma.StringWithAggregatesFilter<"Author"> | string
  biography?: Prisma.StringNullableWithAggregatesFilter<"Author"> | string | null
  socialLinks?: Prisma.JsonNullableWithAggregatesFilter<"Author">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Author"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Author"> | Date | string
}

export type AuthorCreateInput = {
  id?: string
  name: string
  biography?: string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  mangas?: Prisma.MangaAuthorCreateNestedManyWithoutAuthorInput
}

export type AuthorUncheckedCreateInput = {
  id?: string
  name: string
  biography?: string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  mangas?: Prisma.MangaAuthorUncheckedCreateNestedManyWithoutAuthorInput
}

export type AuthorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mangas?: Prisma.MangaAuthorUpdateManyWithoutAuthorNestedInput
}

export type AuthorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mangas?: Prisma.MangaAuthorUncheckedUpdateManyWithoutAuthorNestedInput
}

export type AuthorCreateManyInput = {
  id?: string
  name: string
  biography?: string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AuthorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuthorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuthorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  biography?: Prisma.SortOrder
  socialLinks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AuthorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  biography?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AuthorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  biography?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AuthorScalarRelationFilter = {
  is?: Prisma.AuthorWhereInput
  isNot?: Prisma.AuthorWhereInput
}

export type AuthorCreateNestedOneWithoutMangasInput = {
  create?: Prisma.XOR<Prisma.AuthorCreateWithoutMangasInput, Prisma.AuthorUncheckedCreateWithoutMangasInput>
  connectOrCreate?: Prisma.AuthorCreateOrConnectWithoutMangasInput
  connect?: Prisma.AuthorWhereUniqueInput
}

export type AuthorUpdateOneRequiredWithoutMangasNestedInput = {
  create?: Prisma.XOR<Prisma.AuthorCreateWithoutMangasInput, Prisma.AuthorUncheckedCreateWithoutMangasInput>
  connectOrCreate?: Prisma.AuthorCreateOrConnectWithoutMangasInput
  upsert?: Prisma.AuthorUpsertWithoutMangasInput
  connect?: Prisma.AuthorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AuthorUpdateToOneWithWhereWithoutMangasInput, Prisma.AuthorUpdateWithoutMangasInput>, Prisma.AuthorUncheckedUpdateWithoutMangasInput>
}

export type AuthorCreateWithoutMangasInput = {
  id?: string
  name: string
  biography?: string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AuthorUncheckedCreateWithoutMangasInput = {
  id?: string
  name: string
  biography?: string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AuthorCreateOrConnectWithoutMangasInput = {
  where: Prisma.AuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.AuthorCreateWithoutMangasInput, Prisma.AuthorUncheckedCreateWithoutMangasInput>
}

export type AuthorUpsertWithoutMangasInput = {
  update: Prisma.XOR<Prisma.AuthorUpdateWithoutMangasInput, Prisma.AuthorUncheckedUpdateWithoutMangasInput>
  create: Prisma.XOR<Prisma.AuthorCreateWithoutMangasInput, Prisma.AuthorUncheckedCreateWithoutMangasInput>
  where?: Prisma.AuthorWhereInput
}

export type AuthorUpdateToOneWithWhereWithoutMangasInput = {
  where?: Prisma.AuthorWhereInput
  data: Prisma.XOR<Prisma.AuthorUpdateWithoutMangasInput, Prisma.AuthorUncheckedUpdateWithoutMangasInput>
}

export type AuthorUpdateWithoutMangasInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AuthorUncheckedUpdateWithoutMangasInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  biography?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  socialLinks?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AuthorCountOutputType
 */

export type AuthorCountOutputType = {
  mangas: number
}

export type AuthorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mangas?: boolean | AuthorCountOutputTypeCountMangasArgs
}

/**
 * AuthorCountOutputType without action
 */
export type AuthorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuthorCountOutputType
   */
  select?: Prisma.AuthorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AuthorCountOutputType without action
 */
export type AuthorCountOutputTypeCountMangasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MangaAuthorWhereInput
}


export type AuthorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  biography?: boolean
  socialLinks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mangas?: boolean | Prisma.Author$mangasArgs<ExtArgs>
  _count?: boolean | Prisma.AuthorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["author"]>

export type AuthorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  biography?: boolean
  socialLinks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["author"]>

export type AuthorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  biography?: boolean
  socialLinks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["author"]>

export type AuthorSelectScalar = {
  id?: boolean
  name?: boolean
  biography?: boolean
  socialLinks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AuthorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "biography" | "socialLinks" | "createdAt" | "updatedAt", ExtArgs["result"]["author"]>
export type AuthorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mangas?: boolean | Prisma.Author$mangasArgs<ExtArgs>
  _count?: boolean | Prisma.AuthorCountOutputTypeDefaultArgs<ExtArgs>
}
export type AuthorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AuthorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AuthorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Author"
  objects: {
    mangas: Prisma.$MangaAuthorPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    biography: string | null
    socialLinks: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["author"]>
  composites: {}
}

export type AuthorGetPayload<S extends boolean | null | undefined | AuthorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AuthorPayload, S>

export type AuthorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AuthorCountAggregateInputType | true
  }

export interface AuthorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Author'], meta: { name: 'Author' } }
  /**
   * Find zero or one Author that matches the filter.
   * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
   * @example
   * // Get one Author
   * const author = await prisma.author.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuthorFindUniqueArgs>(args: Prisma.SelectSubset<T, AuthorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Author that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuthorFindUniqueOrThrowArgs} args - Arguments to find a Author
   * @example
   * // Get one Author
   * const author = await prisma.author.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuthorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Author that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorFindFirstArgs} args - Arguments to find a Author
   * @example
   * // Get one Author
   * const author = await prisma.author.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuthorFindFirstArgs>(args?: Prisma.SelectSubset<T, AuthorFindFirstArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Author that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorFindFirstOrThrowArgs} args - Arguments to find a Author
   * @example
   * // Get one Author
   * const author = await prisma.author.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuthorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Authors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Authors
   * const authors = await prisma.author.findMany()
   * 
   * // Get first 10 Authors
   * const authors = await prisma.author.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AuthorFindManyArgs>(args?: Prisma.SelectSubset<T, AuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Author.
   * @param {AuthorCreateArgs} args - Arguments to create a Author.
   * @example
   * // Create one Author
   * const Author = await prisma.author.create({
   *   data: {
   *     // ... data to create a Author
   *   }
   * })
   * 
   */
  create<T extends AuthorCreateArgs>(args: Prisma.SelectSubset<T, AuthorCreateArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Authors.
   * @param {AuthorCreateManyArgs} args - Arguments to create many Authors.
   * @example
   * // Create many Authors
   * const author = await prisma.author.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AuthorCreateManyArgs>(args?: Prisma.SelectSubset<T, AuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Authors and returns the data saved in the database.
   * @param {AuthorCreateManyAndReturnArgs} args - Arguments to create many Authors.
   * @example
   * // Create many Authors
   * const author = await prisma.author.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Authors and only return the `id`
   * const authorWithIdOnly = await prisma.author.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AuthorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AuthorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Author.
   * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
   * @example
   * // Delete one Author
   * const Author = await prisma.author.delete({
   *   where: {
   *     // ... filter to delete one Author
   *   }
   * })
   * 
   */
  delete<T extends AuthorDeleteArgs>(args: Prisma.SelectSubset<T, AuthorDeleteArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Author.
   * @param {AuthorUpdateArgs} args - Arguments to update one Author.
   * @example
   * // Update one Author
   * const author = await prisma.author.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AuthorUpdateArgs>(args: Prisma.SelectSubset<T, AuthorUpdateArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Authors.
   * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
   * @example
   * // Delete a few Authors
   * const { count } = await prisma.author.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AuthorDeleteManyArgs>(args?: Prisma.SelectSubset<T, AuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Authors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Authors
   * const author = await prisma.author.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AuthorUpdateManyArgs>(args: Prisma.SelectSubset<T, AuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Authors and returns the data updated in the database.
   * @param {AuthorUpdateManyAndReturnArgs} args - Arguments to update many Authors.
   * @example
   * // Update many Authors
   * const author = await prisma.author.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Authors and only return the `id`
   * const authorWithIdOnly = await prisma.author.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AuthorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AuthorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Author.
   * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
   * @example
   * // Update or create a Author
   * const author = await prisma.author.upsert({
   *   create: {
   *     // ... data to create a Author
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Author we want to update
   *   }
   * })
   */
  upsert<T extends AuthorUpsertArgs>(args: Prisma.SelectSubset<T, AuthorUpsertArgs<ExtArgs>>): Prisma.Prisma__AuthorClient<runtime.Types.Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Authors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
   * @example
   * // Count the number of Authors
   * const count = await prisma.author.count({
   *   where: {
   *     // ... the filter for the Authors we want to count
   *   }
   * })
  **/
  count<T extends AuthorCountArgs>(
    args?: Prisma.Subset<T, AuthorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuthorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Author.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AuthorAggregateArgs>(args: Prisma.Subset<T, AuthorAggregateArgs>): Prisma.PrismaPromise<GetAuthorAggregateType<T>>

  /**
   * Group by Author.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AuthorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuthorGroupByArgs['orderBy'] }
      : { orderBy?: AuthorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Author model
 */
readonly fields: AuthorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Author.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuthorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mangas<T extends Prisma.Author$mangasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Author$mangasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Author model
 */
export interface AuthorFieldRefs {
  readonly id: Prisma.FieldRef<"Author", 'String'>
  readonly name: Prisma.FieldRef<"Author", 'String'>
  readonly biography: Prisma.FieldRef<"Author", 'String'>
  readonly socialLinks: Prisma.FieldRef<"Author", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Author", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Author", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Author findUnique
 */
export type AuthorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter, which Author to fetch.
   */
  where: Prisma.AuthorWhereUniqueInput
}

/**
 * Author findUniqueOrThrow
 */
export type AuthorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter, which Author to fetch.
   */
  where: Prisma.AuthorWhereUniqueInput
}

/**
 * Author findFirst
 */
export type AuthorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter, which Author to fetch.
   */
  where?: Prisma.AuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authors to fetch.
   */
  orderBy?: Prisma.AuthorOrderByWithRelationInput | Prisma.AuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Authors.
   */
  cursor?: Prisma.AuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Authors.
   */
  distinct?: Prisma.AuthorScalarFieldEnum | Prisma.AuthorScalarFieldEnum[]
}

/**
 * Author findFirstOrThrow
 */
export type AuthorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter, which Author to fetch.
   */
  where?: Prisma.AuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authors to fetch.
   */
  orderBy?: Prisma.AuthorOrderByWithRelationInput | Prisma.AuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Authors.
   */
  cursor?: Prisma.AuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Authors.
   */
  distinct?: Prisma.AuthorScalarFieldEnum | Prisma.AuthorScalarFieldEnum[]
}

/**
 * Author findMany
 */
export type AuthorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter, which Authors to fetch.
   */
  where?: Prisma.AuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authors to fetch.
   */
  orderBy?: Prisma.AuthorOrderByWithRelationInput | Prisma.AuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Authors.
   */
  cursor?: Prisma.AuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authors.
   */
  skip?: number
  distinct?: Prisma.AuthorScalarFieldEnum | Prisma.AuthorScalarFieldEnum[]
}

/**
 * Author create
 */
export type AuthorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * The data needed to create a Author.
   */
  data: Prisma.XOR<Prisma.AuthorCreateInput, Prisma.AuthorUncheckedCreateInput>
}

/**
 * Author createMany
 */
export type AuthorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Authors.
   */
  data: Prisma.AuthorCreateManyInput | Prisma.AuthorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Author createManyAndReturn
 */
export type AuthorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * The data used to create many Authors.
   */
  data: Prisma.AuthorCreateManyInput | Prisma.AuthorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Author update
 */
export type AuthorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * The data needed to update a Author.
   */
  data: Prisma.XOR<Prisma.AuthorUpdateInput, Prisma.AuthorUncheckedUpdateInput>
  /**
   * Choose, which Author to update.
   */
  where: Prisma.AuthorWhereUniqueInput
}

/**
 * Author updateMany
 */
export type AuthorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Authors.
   */
  data: Prisma.XOR<Prisma.AuthorUpdateManyMutationInput, Prisma.AuthorUncheckedUpdateManyInput>
  /**
   * Filter which Authors to update
   */
  where?: Prisma.AuthorWhereInput
  /**
   * Limit how many Authors to update.
   */
  limit?: number
}

/**
 * Author updateManyAndReturn
 */
export type AuthorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * The data used to update Authors.
   */
  data: Prisma.XOR<Prisma.AuthorUpdateManyMutationInput, Prisma.AuthorUncheckedUpdateManyInput>
  /**
   * Filter which Authors to update
   */
  where?: Prisma.AuthorWhereInput
  /**
   * Limit how many Authors to update.
   */
  limit?: number
}

/**
 * Author upsert
 */
export type AuthorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * The filter to search for the Author to update in case it exists.
   */
  where: Prisma.AuthorWhereUniqueInput
  /**
   * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
   */
  create: Prisma.XOR<Prisma.AuthorCreateInput, Prisma.AuthorUncheckedCreateInput>
  /**
   * In case the Author was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AuthorUpdateInput, Prisma.AuthorUncheckedUpdateInput>
}

/**
 * Author delete
 */
export type AuthorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
  /**
   * Filter which Author to delete.
   */
  where: Prisma.AuthorWhereUniqueInput
}

/**
 * Author deleteMany
 */
export type AuthorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Authors to delete
   */
  where?: Prisma.AuthorWhereInput
  /**
   * Limit how many Authors to delete.
   */
  limit?: number
}

/**
 * Author.mangas
 */
export type Author$mangasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaAuthor
   */
  select?: Prisma.MangaAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaAuthor
   */
  omit?: Prisma.MangaAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaAuthorInclude<ExtArgs> | null
  where?: Prisma.MangaAuthorWhereInput
  orderBy?: Prisma.MangaAuthorOrderByWithRelationInput | Prisma.MangaAuthorOrderByWithRelationInput[]
  cursor?: Prisma.MangaAuthorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MangaAuthorScalarFieldEnum | Prisma.MangaAuthorScalarFieldEnum[]
}

/**
 * Author without action
 */
export type AuthorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Author
   */
  select?: Prisma.AuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Author
   */
  omit?: Prisma.AuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthorInclude<ExtArgs> | null
}
